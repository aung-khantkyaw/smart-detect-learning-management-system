{
  "quizzes": [
    {
      "title": "Introduction to Programming Concepts",
      "instructions": "This quiz covers basic programming concepts including variables, data types, and control structures. You have 30 minutes to complete it.",
      "openAt": "2024-01-15T09:00:00Z",
      "closeAt": "2024-01-15T23:59:00Z",
      "questions": [
        {
          "questionType": "SINGLE_CHOICE",
          "prompt": "Which of the following is NOT a primitive data type in most programming languages?",
          "points": 3,
          "options": [
            { "optionText": "Integer", "isCorrect": false },
            { "optionText": "String", "isCorrect": true },
            { "optionText": "Boolean", "isCorrect": false },
            { "optionText": "Float", "isCorrect": false }
          ]
        },
        {
          "questionType": "MULTIPLE_CHOICE",
          "prompt": "Which of the following are control structures? (Select all that apply)",
          "points": 4,
          "options": [
            { "optionText": "If-else statements", "isCorrect": true },
            { "optionText": "For loops", "isCorrect": true },
            { "optionText": "Variables", "isCorrect": false },
            { "optionText": "While loops", "isCorrect": true }
          ]
        },
        {
          "questionType": "SHORT_TEXT",
          "prompt": "Explain the difference between a variable and a constant in programming.",
          "points": 5,
          "options": []
        },
        {
          "questionType": "SINGLE_CHOICE",
          "prompt": "What is the purpose of a loop in programming?",
          "points": 3,
          "options": [
            { "optionText": "To store data", "isCorrect": false },
            { "optionText": "To repeat code execution", "isCorrect": true },
            { "optionText": "To define functions", "isCorrect": false },
            { "optionText": "To handle errors", "isCorrect": false }
          ]
        }
      ]
    },
    {
      "title": "Database Fundamentals",
      "instructions": "Test your knowledge of database concepts, SQL basics, and relational database design principles.",
      "openAt": "2024-01-20T10:00:00Z",
      "closeAt": "2024-01-22T23:59:00Z",
      "questions": [
        {
          "questionType": "SINGLE_CHOICE",
          "prompt": "What does SQL stand for?",
          "points": 2,
          "options": [
            { "optionText": "Structured Query Language", "isCorrect": true },
            { "optionText": "Simple Query Language", "isCorrect": false },
            { "optionText": "Standard Query Language", "isCorrect": false },
            { "optionText": "System Query Language", "isCorrect": false }
          ]
        },
        {
          "questionType": "MULTIPLE_CHOICE",
          "prompt": "Which of the following are SQL commands? (Select all that apply)",
          "points": 4,
          "options": [
            { "optionText": "SELECT", "isCorrect": true },
            { "optionText": "INSERT", "isCorrect": true },
            { "optionText": "PRINT", "isCorrect": false },
            { "optionText": "DELETE", "isCorrect": true }
          ]
        },
        {
          "questionType": "SHORT_TEXT",
          "prompt": "What is a primary key and why is it important in database design?",
          "points": 6,
          "options": []
        },
        {
          "questionType": "SINGLE_CHOICE",
          "prompt": "Which normal form eliminates partial dependencies?",
          "points": 4,
          "options": [
            { "optionText": "First Normal Form (1NF)", "isCorrect": false },
            { "optionText": "Second Normal Form (2NF)", "isCorrect": true },
            { "optionText": "Third Normal Form (3NF)", "isCorrect": false },
            { "optionText": "Fourth Normal Form (4NF)", "isCorrect": false }
          ]
        }
      ]
    },
    {
      "title": "Web Development Basics",
      "instructions": "Quiz covering HTML, CSS, and basic JavaScript concepts for web development.",
      "openAt": "2024-01-25T08:00:00Z",
      "closeAt": "2024-01-27T23:59:00Z",
      "questions": [
        {
          "questionType": "SINGLE_CHOICE",
          "prompt": "Which HTML tag is used to create a hyperlink?",
          "points": 2,
          "options": [
            { "optionText": "<link>", "isCorrect": false },
            { "optionText": "<a>", "isCorrect": true },
            { "optionText": "<href>", "isCorrect": false },
            { "optionText": "<url>", "isCorrect": false }
          ]
        },
        {
          "questionType": "MULTIPLE_CHOICE",
          "prompt": "Which of the following are CSS selectors? (Select all that apply)",
          "points": 3,
          "options": [
            { "optionText": "Class selector (.class)", "isCorrect": true },
            { "optionText": "ID selector (#id)", "isCorrect": true },
            { "optionText": "Element selector (div)", "isCorrect": true },
            { "optionText": "Function selector (function())", "isCorrect": false }
          ]
        },
        {
          "questionType": "SHORT_TEXT",
          "prompt": "Explain the difference between inline, internal, and external CSS.",
          "points": 5,
          "options": []
        }
      ]
    }
  ],
  "assignments": [
    {
      "title": "Programming Exercise: Calculator",
      "description": "Create a simple calculator program that can perform basic arithmetic operations (addition, subtraction, multiplication, division). Include error handling for division by zero.",
      "dueAt": "2024-01-30T23:59:00Z",
      "questionType": "TEXT",
      "questionText": "Write a program in your preferred programming language that implements a calculator with the following requirements:\n\n1. Accept two numbers and an operator (+, -, *, /) as input\n2. Perform the calculation and display the result\n3. Handle division by zero with appropriate error message\n4. Allow the user to perform multiple calculations\n5. Include comments explaining your code\n\nSubmit your source code with a brief explanation of your approach.",
      "questionFileUrl": null
    },
    {
      "title": "Database Design Project",
      "description": "Design a database schema for a library management system. Your design should include proper normalization and relationships between entities.",
      "dueAt": "2024-02-05T23:59:00Z",
      "questionType": "TEXT",
      "questionText": "Design a comprehensive database schema for a library management system that includes:\n\n1. Books (title, author, ISBN, publication year, genre, availability status)\n2. Members (member ID, name, contact info, membership date)\n3. Loans (loan ID, book ID, member ID, loan date, due date, return date)\n4. Authors (author ID, name, biography)\n5. Categories/Genres\n\nRequirements:\n- Implement proper primary and foreign key relationships\n- Ensure the design is in at least 3NF\n- Include sample data for each table\n- Provide SQL CREATE statements\n- Draw an ER diagram\n\nSubmit your SQL script and ER diagram with explanations.",
      "questionFileUrl": null
    },
    {
      "title": "Web Development Portfolio",
      "description": "Create a personal portfolio website showcasing your web development skills using HTML, CSS, and JavaScript.",
      "dueAt": "2024-02-10T23:59:00Z",
      "questionType": "PDF",
      "questionText": null,
      "questionFileUrl": "https://example.com/assignments/web-portfolio-requirements.pdf"
    },
    {
      "title": "Data Structure Implementation",
      "description": "Implement a stack data structure with all basic operations and demonstrate its usage with examples.",
      "dueAt": "2024-02-15T23:59:00Z",
      "questionType": "TEXT",
      "questionText": "Implement a Stack data structure from scratch with the following operations:\n\n1. push(item) - Add an item to the top of the stack\n2. pop() - Remove and return the top item\n3. peek() - Return the top item without removing it\n4. isEmpty() - Check if the stack is empty\n5. size() - Return the number of items in the stack\n\nRequirements:\n- Use arrays or linked lists as the underlying storage\n- Include proper error handling (e.g., pop from empty stack)\n- Write test cases demonstrating each operation\n- Analyze time and space complexity\n- Provide a real-world example where stacks are useful\n\nSubmit your implementation with test cases and analysis.",
      "questionFileUrl": null
    },
    {
      "title": "Algorithm Analysis Report",
      "description": "Research and compare different sorting algorithms, analyzing their time and space complexity.",
      "dueAt": "2024-02-20T23:59:00Z",
      "questionType": "PDF",
      "questionText": null,
      "questionFileUrl": "https://example.com/assignments/sorting-algorithms-analysis.pdf"
    }
  ],
  "sampleSubmissions": {
    "quizSubmission": {
      "quizId": "quiz-001",
      "studentId": "student-001",
      "answers": [
        {
          "questionId": "q1-1",
          "selectedOptionIds": ["opt-1-1-2"],
          "shortTextAnswer": null
        },
        {
          "questionId": "q1-2",
          "selectedOptionIds": ["opt-1-2-1", "opt-1-2-2", "opt-1-2-4"],
          "shortTextAnswer": null
        },
        {
          "questionId": "q1-3",
          "selectedOptionIds": null,
          "shortTextAnswer": "A variable is a storage location that can change its value during program execution, while a constant maintains the same value throughout the program lifecycle."
        },
        {
          "questionId": "q1-4",
          "selectedOptionIds": ["opt-1-4-2"],
          "shortTextAnswer": null
        }
      ]
    },
    "assignmentSubmission": {
      "assignmentId": "assign-001",
      "studentId": "student-001",
      "answerText": "Here is my calculator implementation:\n\n```python\ndef calculator():\n    while True:\n        try:\n            num1 = float(input(\"Enter first number: \"))\n            operator = input(\"Enter operator (+, -, *, /): \")\n            num2 = float(input(\"Enter second number: \"))\n            \n            if operator == \"+\":\n                result = num1 + num2\n            elif operator == \"-\":\n                result = num1 - num2\n            elif operator == \"*\":\n                result = num1 * num2\n            elif operator == \"/\":\n                if num2 == 0:\n                    print(\"Error: Division by zero!\")\n                    continue\n                result = num1 / num2\n            else:\n                print(\"Invalid operator!\")\n                continue\n            \n            print(f\"Result: {result}\")\n            \n            if input(\"Continue? (y/n): \").lower() != \"y\":\n                break\n                \n        except ValueError:\n            print(\"Invalid input! Please enter numbers.\")\n\ncalculator()\n```\n\nThis implementation handles all the requirements including error handling for division by zero and invalid inputs."
    }
  }
}
